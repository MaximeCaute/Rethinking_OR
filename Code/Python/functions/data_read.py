import os
import pandas as pd



def parse_solution(input_file):
    """
    Parse solution files to generate 5 different dict according to the sections of the solution files
    :param input_file: .txt file containing the solutions generated by the simulator
    :return: info, times, events, rides, vehicles
        5 different dictionaries containing the info of the file
    """
    time_ind = False
    event_ind = False
    ride_ind = False
    vehicles_ind = False
    
    vehicle_num = 0
    

    info = {}
    times = {}  # dictionary of generation time of requests: [cust_id]:time
    events = {}  # dictionary of events: [event_number]: [time,vehicle_id,node,event_id,rech_time]
    rides = {}  # dictionary of rives: [cust_id]: [vehicle_id,pickup_t,dropoff_time,excess_t]
    vehicles = {} # dictionary of vehicle actions [idx]: 
    #[vehicle number, node,wait,service start, service end,arr,dep,service t,load,battery,charging,abottom,btop]

    
    r_file = open(input_file, 'r')
    line = r_file.readline()

    while line:  # reads line by line until it gots an empty line

        #  get basic information about the problem
        if line.rstrip() == "num customers:":
            #  get next line
            line = r_file.readline()
            info['num customers'] = int(line)

        elif line.rstrip() == "num vehicles:":
            #  get next line
            line = r_file.readline()
            info['num vehicles'] = int(line)

        elif line.rstrip() == "Time horizon [min]":
            #  get next line
            line = r_file.readline()
            info['time horizon'] = int(line)

        elif line.rstrip() == "Objective weight factors:":
            #  get next line
            line = r_file.readline()
            info['weights'] = line.rstrip()

        #  get generation times
        elif line.rstrip() == 'Generation times [cust_id/time]:':
            #print('Reading times')
            time_ind = True
            line = r_file.readline()



        elif line.rstrip() == "Events [time,vehicle_id,node,event_id,rech_time]:":
            #print('Reading events')
            event_ind = True
            i = 0
            line = r_file.readline()

        elif line.rstrip() == "Ride times [cust_id,vehicle_id,pickup_t,dropoff_time,excess_t]:":
            #print('Reading ride times')
            ride_ind = True
            line = r_file.readline()


        elif line.rstrip() == "Vehicle routes (node,wait,service start, service end,arr,dep,service t,load,battery,charging,abottom,btop):":
            vehicles_ind = True
            i = 0 # restart counter for idx 
            line = r_file.readline()
            

        if time_ind:
            if line != "\n":
                line = line.rstrip()
                line_list = line.split(',')
                times[line_list[0]] = line_list[1]
            else:
                time_ind = False

        if event_ind:
            
            if line != "\n":
                line = line.rstrip()
                event_info = line.split(',')
                events[i] = event_info
                i += 1
            else:
                event_ind = False

        if ride_ind:
            if line != "\n":
                line = line.rstrip()
                ride_info = line.split(',')
                rides[ride_info[0]] = ride_info[1:]
            else:
                ride_ind = False
        
        if vehicles_ind:
            
            if line!= "\n":
                line = line.rstrip()
                
                if len(line.split()) > 1:
                    # Update vehicle number
                    vehicle_num = int(line.split()[2])
                    
                else:
                    vehicles[i] = [vehicle_num] + line.split(',')
                    i += 1
                    
            else:
                vehicles_ind = False

        line = r_file.readline()

    return info, times, events, rides, vehicles





def generate_solution_tables(times, events, rides, vehicles, sol_num):
    
    # Create Demand - time dataframe
    df_time = pd.DataFrame.from_dict(times, orient='index', columns=['time'])
    df_time['customer'] = df_time.index
    df_time['customer'] = df_time['customer'].apply(lambda x: int(x))
    
    df_time.to_pickle('./tables/time_sol_{}.pkl'.format(sol_num))

    # Create Events dataframe
    df_events = pd.DataFrame.from_dict(events, orient='index', \
                columns=['time', 'vehicle_id', 'node', 'event_id', 'rech_time'])
    events = {1: 'Demand', 2:'Departure', 3:'Pickup', \
             4:'Dropoff', 5:'Arrival', 6:'Recharging'}
    df_events['event_description'] = df_events['event_id'].apply(lambda x: events[int(x)])
    
    df_events['time'] = df_events['time'].apply(lambda x: float(x))
    df_events['vehicle_id'] = df_events['vehicle_id'].apply(lambda x: int(x))
    df_events['node'] = df_events['node'].apply(lambda x: int(x))
    df_events['event_id'] = df_events['event_id'].apply(lambda x: int(x))
    df_events['rech_time'] = df_events['rech_time'].apply(lambda x: float(x))
    
    df_events.to_pickle('./tables/events_sol_{}.pkl'.format(sol_num))

    
    # Create Rides dataframe
    df_rides = pd.DataFrame.from_dict(rides, orient='index', \
            columns=['vehicle_id' ,'pickup_t', 'dropoff_t', 'excess_t'])
    df_rides['cust_id'] = df_rides.index
    df_rides['cust_id'] = df_rides['cust_id'].apply(lambda x: int(x))
    df_rides['vehicle_id'] = df_rides['vehicle_id'].apply(lambda x: int(x))
    df_rides['pickup_t'] = df_rides['pickup_t'].apply(lambda x: float(x))
    df_rides['dropoff_t'] = df_rides['dropoff_t'].apply(lambda x: float(x))
    df_rides['excess_t'] = df_rides['excess_t'].apply(lambda x: float(x))
    
    
    df_rides.to_pickle('./tables/rides_sol_{}.pkl'.format(sol_num))

    # Create vehicles dataframe
    df_vehicles = pd.DataFrame.from_dict(vehicles, orient='index',
                columns=['vehicle_number', 'node', 'wait', 'service start', 'service end', 'arr', 'dep', 'service t',\
                         'load', 'battery', 'charging', 'abottom', 'btop'])
    
    df_vehicles['vehicle_number'] = df_vehicles['vehicle_number'].apply(lambda x: int(x))
    df_vehicles.node = df_vehicles.node.apply(lambda x:int(x))
    df_vehicles['service start'] = df_vehicles['service start'].apply(lambda x: float(x))
    df_vehicles['service end'] = df_vehicles['service end'].apply(lambda x: float(x))
    df_vehicles['arr'] = df_vehicles['arr'].apply(lambda x: float(x))
    df_vehicles['dep'] = df_vehicles['dep'].apply(lambda x: float(x))
    df_vehicles['load'] = df_vehicles['load'].apply(lambda x: int(x))

    df_vehicles.to_pickle('./tables/vehicles_sol_{}.pkl'.format(sol_num))
    
   
