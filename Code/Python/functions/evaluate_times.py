from SimulatorNN import Simulation, Vehicle, Client
from Utils import get_vehicle_assignment_nn, get_vehicle_assignment_random
import pandas as pd
import numpy as np


def generate_event(TABLE, model, NN, num_channels, im_size, random=False, single_output=False, single_input=False):
    """
    Simulate event from the given tables using the assignment generated by the model.

    :param TABLE: list of integers; information corresponding to the event to evaluate
    :param model: pre-trainned model to generate vehicle assignments (pytorch model)
    :param NN: boolean; usage of model or default assignments
    :return: Event object with information about the simulated event.
    """
    Event = Simulation(TABLE)
    client = 0
    if not NN:
        client, state = Event.get_next_customer()
    else:
        client, state = Event.get_next_customer_nn()

    while client != -1:
        # get next customer
        if not NN and not random:
            # client, state = Event.get_next_customer()
            next_vehicle = Event.rides[Event.rides.cust_id == client.ID].vehicle_id
            next_vehicle = int(next_vehicle) - 1


        elif NN and not random:
            # client, state = Event.get_next_customer_nn()
            next_vehicle = get_vehicle_assignment_nn(state, model, channels_net=num_channels, im_size=im_size,
                                                     single_output=single_output, single_input=single_input)

        elif random:
            next_vehicle = get_vehicle_assignment_random(8)

        # print('client {} with vehicle {}'.format(client, next_vehicle))
        V = Event.vehicles[next_vehicle]
        V.assign_client(client)

        #  update state and get next request
        if not NN:
            client, state = Event.get_next_customer()
        else:
            client, state = Event.get_next_customer_nn()

    #  end episode: pick and drop all the remaining clients
    for v in Event.vehicles:
        # print('Finishing with ', v.ID)
        while len(v.clients) != 0 or len(v.clients_to_pick) != 0:
            #  set time to 1000 to let the process continue until termination
            v.update(1000)
    return Event

def generate_times(Event):
    """
    Generate dataframe with rides times to evaluate data
    :param Event: Event object
    :return:
        df_clients: dataframe with data from the model assignemnt
        sol: dataframe with data from the optimal policy assignment
    """

    # store clients data
    clients_info = []
    for c in Event.customers:
        info = {
            'ID': c.ID, 'arrival': c.arrival, 'pickup_t': c.pickup_t, 'dropoff_t': c.dropoff_t
        }
        clients_info.append(info)

    df_clients = pd.DataFrame(clients_info)
    df_clients.drop([0], axis=0, inplace=True)

    df_clients['delta_t'] = df_clients.dropoff_t - df_clients.arrival
    df_clients['travel_t'] = df_clients.dropoff_t - df_clients.pickup_t
    df_clients['service_t'] = df_clients.pickup_t - df_clients.arrival

    solution = Event.rides
    arrival_time = df_clients[['ID', 'arrival']]

    sol = pd.merge(solution, arrival_time, left_on='cust_id', right_on='ID')
    sol['delta_t'] = sol['dropoff_t'] - sol['arrival']
    sol['service_t'] = sol['pickup_t'] - sol['arrival']

    return df_clients, sol


def print_statistics(total_info):
    excess_time = total_info[total_info.service_t_network > max(total_info.service_t_solution)]
    excess_time_travel = total_info[total_info.travel_t_network > max(total_info.travel_t_solution)]
    print('Num clients over max. service time: {}'.format(excess_time.shape[0]))
    print('Num clients over max. travel time: {}'.format(excess_time_travel.shape[0]))
    print('--------------------------------- MAX ')
    print('Service time network: {:.3f}\tService time optimal policy {:.3f}\tDifference service time {:.3f}'.\
          format(max(total_info.service_t_network), max(total_info.service_t_solution), max(total_info.service_t_network) - max(total_info.service_t_solution)))
    print('Travel  time network: {:.3f}\tTravel  time optimal policy {:.3f}\tDifference travel  time {:.3f}'.\
          format(max(total_info.travel_t_network), max(total_info.travel_t_solution), max(total_info.travel_t_network) - max(total_info.travel_t_solution)))
    print('Total   time network: {:.3f}\tTotal   time optimal policy {:.3f}\tDifference travel   time {:.3f}'.\
          format(max(total_info.delta_t_network), max(total_info.delta_t_solution), max(total_info.delta_t_network) - max(total_info.delta_t_solution)))
    print('--------------------------------- MEAN ')
    print('Service time network: {:.3f}\tService time optimal policy {:.3f}\tDifference service time {:.3f}'.\
          format(np.mean(total_info.service_t_network), np.mean(total_info.service_t_solution), np.mean(total_info.service_t_network) - np.mean(total_info.service_t_solution)))
    print('Travel  time network: {:.3f}\tTravel  time optimal policy {:.3f}\tDifference travel  time {:.3f}'.\
          format(np.mean(total_info.travel_t_network), np.mean(total_info.travel_t_solution), np.mean(total_info.travel_t_network) - np.mean(total_info.travel_t_solution)))
    print('Total   time network: {:.3f}\tTotal   time optimal policy {:.3f}\tDifference travel   time {:.3f}'.\
          format(np.mean(total_info.delta_t_network), np.mean(total_info.delta_t_solution),  np.mean(total_info.delta_t_network) - np.mean(total_info.delta_t_solution)))
    print('--------------------------------- MEDIAN ')
    print('Service time network: {:.3f}\tService time optimal policy {:.3f}\tDifference service time {:.3f}'.\
          format(np.median(total_info.service_t_network), np.median(total_info.service_t_solution), np.median(total_info.service_t_network) - np.median(total_info.service_t_solution)))
    print('Travel  time network: {:.3f}\tTravel  time optimal policy {:.3f}\tDifference travel  time {:.3f}'.\
          format(np.median(total_info.travel_t_network), np.median(total_info.travel_t_solution), np.median(total_info.travel_t_network) - np.median(total_info.travel_t_solution)))
    print('Total   time network: {:.3f}\tTotal   time optimal policy {:.3f}\tDifference travel   time {:.3f}'.\
          format(np.median(total_info.delta_t_network), np.median(total_info.delta_t_solution),  np.median(total_info.delta_t_network) - np.median(total_info.delta_t_solution)))



